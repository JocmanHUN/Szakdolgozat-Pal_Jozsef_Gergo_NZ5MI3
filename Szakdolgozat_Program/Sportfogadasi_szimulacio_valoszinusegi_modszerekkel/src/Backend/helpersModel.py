from datetime import datetime

from dateutil import parser

from src.Backend.api_requests import get_league_id_by_fixture, get_match_statistics, get_fixtures_for_team, \
    get_head_to_head_stats, fetch_odds_for_fixture, get_fixture_by_id, get_team_country_by_id
from src.Backend.helpersAPI import get_league_by_team, save_model_prediction, write_league_id_to_team, get_last_matches, \
    write_to_match_statistics, write_to_fixtures, read_odds_by_fixture, write_to_odds, read_from_match_statistics, \
    read_head_to_head_stats, delete_fixture_by_id
from src.Backend.probability_models.bayes_classic_model import bayes_classic_predict
from src.Backend.probability_models.bayes_empirical_model import bayes_empirical_predict
from src.Backend.probability_models.elo_model import elo_predict
from src.Backend.probability_models.logistic_regression_model import logistic_regression_predict
from src.Backend.probability_models.monte_carlo_model import monte_carlo_predict
from src.Backend.probability_models.poisson_model import poisson_predict


def save_all_predictions(fixture_id, home_team_id, away_team_id, match_group_id):
    """
    Elmenti az √∂sszes modell el≈ërejelz√©s√©t egy adott m√©rk≈ëz√©sre.
    """
    # üèÜ Liga lek√©r√©se csapat alapj√°n
    league_id = get_league_by_team(home_team_id)

    # üìÜ Helyes szezon meg√°llap√≠t√°sa
    season = get_current_season()

    if league_id is None:
        print(
            f"‚ö†Ô∏è Nem siker√ºlt lek√©rni a liga azonos√≠t√≥t a {home_team_id} csapathoz. Pr√≥b√°lkoz√°s fixture_id alapj√°n...")
        league_id = get_league_id_by_fixture(fixture_id)

        if league_id:
            write_league_id_to_team(home_team_id, league_id)
        else:
            print("‚ùå Elo-modell kihagyva, liga ID tov√°bbra sincs.")
            return

    models = {
        1: bayes_classic_predict,
        2: monte_carlo_predict,
        3: poisson_predict,
        4: bayes_empirical_predict,
        5: logistic_regression_predict,
        6: lambda h, a: elo_predict(h, a, league_id, season)  # Elo-modell csapat alapj√°n szerzett lig√°val
    }

    for model_id, model_function in models.items():
        prediction = model_function(home_team_id, away_team_id)

        if prediction:
            best_outcome = max(prediction, key=prediction.get)
            best_probability = prediction[best_outcome]
            print(best_outcome, best_probability)
            save_model_prediction(fixture_id, model_id, best_outcome, best_probability, match_group_id)

    print(f"üìä Minden modell el≈ërejelz√©se mentve a {fixture_id} m√©rk≈ëz√©shez!")


def get_current_season():
    """
    Meg√°llap√≠tja az aktu√°lis szezon √©vsz√°m√°t a fut√≥ szezon alapj√°n.
    P√©lda: Ha 2024 m√°rcius van ‚Üí 2023/24 szezon ‚Üí 2023 a helyes szezonkezd√©s.
           Ha 2024 szeptember van ‚Üí 2024/25 szezon ‚Üí 2024 a helyes szezonkezd√©s.
    """
    current_year = datetime.now().year
    current_month = datetime.now().month

    # Ha az √©v els≈ë fel√©ben vagyunk (janu√°r - j√∫nius), akkor az el≈ëz≈ë √©v a szezon kezdete
    if current_month < 7:
        return current_year - 1  # Pl. 2024 m√°rcius ‚Üí 2023/24 szezon
    else:
        return current_year  # Pl. 2024 szeptember ‚Üí 2024/25 szezon


def ensure_simulation_data_available(fixture_list, num_matches=15):
    """
    Biztos√≠tja, hogy a modellekhez sz√ºks√©ges adatok rendelkez√©sre √°lljanak az adatb√°zisban.
    Ha hi√°nyoznak, az API-b√≥l lek√©rdezi √©s elmenti azokat.

    :param fixture_list: M√©rk≈ëz√©sek list√°ja ([(home_team_id, away_team_id, fixture_id), ...]).
    :param league_id: A liga azonos√≠t√≥ja.
    :param season: Az aktu√°lis szezon.
    """
    valid_fixtures = []
    for home_team_id, away_team_id, fixture_id in fixture_list:
        print(f"\nüîé **Adatok biztos√≠t√°sa a m√©rk≈ëz√©shez: {home_team_id} vs {away_team_id}** (Fixture ID: {fixture_id})")
        for team_id in [home_team_id, away_team_id]:
            matches = get_last_matches(team_id, away_team_id, num_matches)

            # Ha nincs el√©g meccs, pr√≥b√°ljuk p√≥tolni
            if not matches or len(matches) < num_matches:
                print(
                    f"‚ö†Ô∏è Nem elegend≈ë meccs tal√°lhat√≥ az adatb√°zisban (Csapat ID: {team_id}), API lek√©r√©s sz√ºks√©ges...")

                api_matches = get_fixtures_for_team(team_id, num_matches+10)
                if api_matches:
                    write_to_fixtures(api_matches)
                    print(f"‚úÖ {len(api_matches)} m√©rk≈ëz√©s elmentve (Csapat ID: {team_id}).")
                else:
                    print(f"‚ùå Nem siker√ºlt meccseket lek√©rni az API-b√≥l (Csapat ID: {team_id})")

                # √öjra lek√©rj√ºk az adatb√°zisb√≥l
                matches = get_last_matches(team_id, away_team_id, 30)

            # üîΩ Statisztik√°val rendelkez≈ë meccsek sz≈±r√©se
            valid_matches = []
            consecutive_failures = 0

            for match in matches:
                stats = read_from_match_statistics(match["id"])
                if stats:
                    valid_matches.append(match)
                    consecutive_failures = 0
                else:
                    stats_from_api = get_match_statistics(match["id"])
                    if stats_from_api:
                        print(f"‚úÖ Stat lek√©rve √©s elmentve: {match['id']}")
                        valid_matches.append(match)
                        consecutive_failures = 0
                    else:
                        print(f"‚ùå Nincs stat az API-ban sem, t√∂rl√©s: {match['id']}")
                        delete_fixture_by_id(match["id"])  # Csak ha t√©nyleg volt mentve
                        consecutive_failures += 1

                        if consecutive_failures >= 30:
                            print(f"üõë 3 egym√°st k√∂vet≈ë stat hi√°ny, megszak√≠tva (Csapat ID: {team_id})")
                            break

                if len(valid_matches) >= num_matches:
                    break

            print(f"üìä {len(valid_matches)} statisztik√°val rendelkez≈ë meccs (Csapat ID: {team_id})")

            if len(valid_matches) < 10:
                print(
                    f"‚õî Nem el√©g statisztik√°s meccs (min. 10 kellene), ez√©rt a m√©rk≈ëz√©s kihagyva (Csapat ID: {team_id})")
                break  # m√°r az egyik csapatn√°l sem el√©g, nem kell n√©zni tov√°bb

        h2h_matches = read_head_to_head_stats(home_team_id, away_team_id)

        if len(h2h_matches) < 10:
            print(
                f"‚ö†Ô∏è Nem elegend≈ë H2H meccs az adatb√°zisban ({len(h2h_matches)} db), API lek√©r√©s sz√ºks√©ges: ({home_team_id} vs {away_team_id})")
            h2h_stats = get_head_to_head_stats(home_team_id, away_team_id)
        else:
            print(f"‚úÖ Megfelel≈ë sz√°m√∫ H2H meccs tal√°lhat√≥ az adatb√°zisban ({len(h2h_matches)} db)")
            h2h_stats = h2h_matches

        valid_matches = []

        for match in h2h_stats:
            match_date = parser.isoparse(match["date"]) if isinstance(match["date"], str) else match["date"]
            match_date = match_date.replace(tzinfo=None)

            if match.get("status") in ("NS", "TBD", "POSTP"):
                continue

            stats = read_from_match_statistics(match["id"])
            if stats:
                valid_matches.append(match)
                continue

            stats = get_match_statistics(match["id"])
            if not stats or not any(
                    any(item.get("value") not in [None, 0, ""] for item in team["statistics"]) for team in stats):
                print(f"‚ùå Nincs haszn√°lhat√≥ stat ehhez a H2H meccshez: {match['id']}")
                continue

            fixture = get_fixture_by_id(match["id"])
            if not fixture:
                continue

            match["home_team_id"] = fixture["teams"]["home"]["id"]
            match["home_team_name"] = fixture["teams"]["home"]["name"]
            match["home_team_logo"] = fixture["teams"]["home"]["logo"]
            match["home_team_country"] = get_team_country_by_id(match["home_team_id"]) or None

            match["away_team_id"] = fixture["teams"]["away"]["id"]
            match["away_team_name"] = fixture["teams"]["away"]["name"]
            match["away_team_logo"] = fixture["teams"]["away"]["logo"]
            match["away_team_country"] = get_team_country_by_id(match["away_team_id"]) or None

            match["date"] = parser.isoparse(fixture["fixture"]["date"])
            match["status"] = fixture["fixture"]["status"]
            match["score_home"] = fixture["goals"]["home"]
            match["score_away"] = fixture["goals"]["away"]

            write_to_fixtures([match])
            for team_stats in stats:
                team_id = team_stats["team"]["id"]
                write_to_match_statistics(match["id"], team_id, team_stats["statistics"])

            print(f"‚úÖ Fixture √©s stat mentve: {match['id']}")
            valid_matches.append(match)

        # ‚úÖ V√©gs≈ë ellen≈ërz√©s
        if len(valid_matches) < 5:
            print(f"‚õî Nem el√©g H2H meccs statisztik√°val (csak {len(valid_matches)}), m√©rk≈ëz√©s kihagyva.")
            continue
        else:
            print(f"üìä √ñsszesen {len(valid_matches)} H2H meccshez van statisztika.")

        # √öjra lek√©rj√ºk az √∂sszes H2H meccset a v√©gs≈ë ellen≈ërz√©shez
        valid_final_h2h = []
        all_h2h_matches = read_head_to_head_stats(home_team_id, away_team_id)
        for match in all_h2h_matches:
            stats = read_from_match_statistics(match["id"])
            print(f"üìÇ Fixture ID: {match['id']} ‚Üí {len(stats)} stat sor tal√°lhat√≥.")
            if stats:
                valid_final_h2h.append(match)

        print(f"üìä √ñsszesen {len(valid_final_h2h)} H2H meccshez van statisztika elmentve.")

        if len(valid_final_h2h) < 5:
            print(f"‚õî Nem el√©g H2H adat (min. 5 statisztik√°s meccs kellene), ez√©rt a m√©rk≈ëz√©s kihagyva.")
            continue

        if not read_odds_by_fixture(fixture_id):
            print(f"‚ö†Ô∏è Hi√°nyz√≥ oddsok: {fixture_id}, API lek√©r√©s...")
            odds = fetch_odds_for_fixture(fixture_id)
            if odds:
                processed_odds = []
                for bookmaker in odds:  # A fogad√≥irod√°kat tartalmaz√≥ lista
                    for bet in bookmaker.get("bookmakers", []):
                        for bet_option in bet.get("bets", []):
                            if bet_option.get("name") == "Match Winner":
                                processed_odds.append({
                                    "fixture_id": fixture_id,
                                    "bookmaker_id": bet["id"],
                                    "home_odds": bet_option["values"][0]["odd"],
                                    "draw_odds": bet_option["values"][1]["odd"],
                                    "away_odds": bet_option["values"][2]["odd"],
                                    "updated_at": datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                                })

                if processed_odds:
                    write_to_odds(processed_odds)  # Oddsok ment√©se
                    print(f"‚úÖ Oddsok elmentve a m√©rk≈ëz√©shez: {fixture_id}")
                else:
                    print(f"‚ùå Nem siker√ºlt oddsokat feldolgozni: {fixture_id}")
                    continue
            else:
                print(f"‚ùå Nem siker√ºlt lek√©rni az oddsokat: {fixture_id}")
                continue
        valid_fixtures.append(fixture_id)
    if valid_fixtures:
        print("\n‚úÖ **Minden sz√ºks√©ges adat el√©rhet≈ë! A szimul√°ci√≥ futtathat√≥.** üöÄ")
    return valid_fixtures


