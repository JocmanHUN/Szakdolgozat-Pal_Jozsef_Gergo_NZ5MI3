import tkinter as tk
from tkinter import ttk, messagebox
from src.Backend.DB.fixtures import update_fixtures_status, fetch_fixtures_for_simulation
from src.Backend.DB.predictions import evaluate_predictions, update_simulation_profit, get_predictions_for_fixture
from src.Backend.DB.simulations import load_simulations_from_db
from src.Frontend.windows.visualizationWindow import VisualizationWindow


class SimulationsWindow(tk.Toplevel):
    def __init__(self, master, refresh_callback=None):
        super().__init__(master)
        self.refresh_callback = refresh_callback
        self.title("Szimul√°ci√≥k √©s m√©rk≈ëz√©sek")
        self.geometry("1000x500")
        self.minsize(1000, 500)

        # Szimul√°ci√≥k t√°bl√°zata
        self.simulation_label = ttk.Label(self, text="El√©rhet≈ë szimul√°ci√≥k", font=("Arial", 12, "bold"))
        self.simulation_label.pack(pady=5)

        self.simulation_treeview = ttk.Treeview(self, columns=("id", "name", "date"), show="headings")
        self.simulation_treeview.heading("id", text="ID", anchor="center")
        self.simulation_treeview.heading("name", text="Szimul√°ci√≥ neve")
        self.simulation_treeview.heading("date", text="D√°tum")

        self.simulation_treeview.column("id", width=50, anchor="center")
        self.simulation_treeview.column("name", width=200)
        self.simulation_treeview.column("date", width=150)

        self.simulation_treeview.pack(fill="both", expand=True, padx=10, pady=5)

        self.simulation_treeview.bind("<Double-1>", self.on_simulation_select)

        self.load_simulations()

        # M√©rk≈ëz√©sek t√°bl√°zata
        self.fixture_label = ttk.Label(self, text="Szimul√°ci√≥hoz tartoz√≥ m√©rk≈ëz√©sek", font=("Arial", 12, "bold"))
        self.fixture_label.pack(pady=5)

        self.fixture_treeview = ttk.Treeview(self, columns=(
            "fixture_id", "home_team", "away_team", "match_date",
            "bayes_classic", "monte_carlo", "poisson",
            "bayes_empirical", "log_reg", "elo"
        ), show="headings")

        self.fixture_treeview.heading("fixture_id", text="M√©rk≈ëz√©s ID", anchor="center")
        self.fixture_treeview.heading("home_team", text="Hazai csapat")
        self.fixture_treeview.heading("away_team", text="Vend√©g csapat")
        self.fixture_treeview.heading("match_date", text="D√°tum")

        self.fixture_treeview.heading("bayes_classic", text="Bayes Classic")
        self.fixture_treeview.heading("monte_carlo", text="Monte Carlo")
        self.fixture_treeview.heading("poisson", text="Poisson")
        self.fixture_treeview.heading("bayes_empirical", text="Bayes Empirical")
        self.fixture_treeview.heading("log_reg", text="Logistic Reg.")
        self.fixture_treeview.heading("elo", text="Elo")

        self.fixture_treeview.pack(fill="both", expand=True, padx=10, pady=5)

        self.add_widgets()

    def add_widgets(self):
        button_frame = tk.Frame(self)
        button_frame.pack(pady=5)

        self.delete_simulation_button = ttk.Button(
            button_frame, text="Szimul√°ci√≥ t√∂rl√©se", command=self.delete_selected_simulation
        )
        self.delete_simulation_button.pack(side="left", padx=5)

        self.close_button = ttk.Button(button_frame, text="Bez√°r√°s", command=self.destroy)
        self.close_button.pack(side="left", padx=5)

    def load_simulations(self):
        self.simulation_treeview.delete(*self.simulation_treeview.get_children())

        simulations = load_simulations_from_db()
        for simulation in simulations:
            self.simulation_treeview.insert("", "end",
                                            values=(simulation["id"], simulation["name"], simulation["created_at"]))

    def on_simulation_select(self, event):
        """Ha egy szimul√°ci√≥ra kattintunk, friss√≠ti az adatokat, ellen≈ërzi a st√°tuszokat √©s megjelen√≠ti a vizualiz√°ci√≥t."""
        selected_item = self.simulation_treeview.selection()
        if not selected_item:
            return

        sim_id = int(self.simulation_treeview.item(selected_item[0], "values")[0])
        update_fixtures_status()
        # üîç Lek√©rj√ºk az adott match group √∂sszes m√©rk≈ëz√©s√©t
        fixtures = fetch_fixtures_for_simulation(sim_id)
        predictions_by_fixture = []

        # üìå Ellen≈ërizz√ºk, hogy mely m√©rk≈ëz√©sek √©rtek m√°r v√©get
        completed_fixtures = [f for f in fixtures if isinstance(f, dict) and f.get("status") in ["FT", "AET", "PEN"]]
        pending_fixtures = [f for f in fixtures if isinstance(f, dict) and f.get("status") not in ["FT", "AET", "PEN"]]
        print(completed_fixtures)
        print(pending_fixtures)
        # üìå Ki√©rt√©kelj√ºk a befejezett m√©rk≈ëz√©seket
        if completed_fixtures:
            for fixture in completed_fixtures:
                home_score = fixture.get("score_home")
                away_score = fixture.get("score_away")
                if home_score is not None and away_score is not None:
                    evaluate_predictions(fixture["fixture_id"],home_score,away_score)

            # üîÑ Friss√≠tj√ºk a szimul√°ci√≥ √∂sszegzett profitj√°t
            update_simulation_profit(sim_id)

        # ‚ö†Ô∏è Figyelmeztet√©s, ha m√©g nem minden m√©rk≈ëz√©s √©rt v√©get
        if pending_fixtures:
            print(f"‚ö†Ô∏è M√©g {len(pending_fixtures)} m√©rk≈ëz√©s zajlik a szimul√°ci√≥ban (ID: {sim_id})")
            messagebox.showinfo("R√©szleges eredm√©nyek",
                                f"{len(pending_fixtures)} m√©rk≈ëz√©s m√©g nem √©rt v√©get.\nA diagram csak a befejezett m√©rk≈ëz√©seket tartalmazza.")

        # üìä Friss√≠tett adatokat jelen√≠ts√ºk meg a t√°bl√°zatban
        self.fixture_treeview.delete(*self.fixture_treeview.get_children())

        for fixture in fixtures:
            fixture_id = fixture["fixture_id"]
            predictions = get_predictions_for_fixture(fixture_id)
            predictions_by_fixture.append({"fixture": fixture, "predictions": predictions})

            self.fixture_treeview.insert("", "end", values=(
                fixture_id,
                fixture["home_team"],
                fixture["away_team"],
                fixture["match_date"],
                predictions["bayes_classic"],
                predictions["monte_carlo"],
                predictions["poisson"],
                predictions["bayes_empirical"],
                predictions["log_reg"],
                predictions["elo"]
            ))

        # üìà Megnyitjuk a vizualiz√°ci√≥s ablakot a predikci√≥kkal
        VisualizationWindow(self, predictions_by_fixture)

        print(
            f"‚úÖ Szimul√°ci√≥ ({sim_id}) friss√≠tve! {len(completed_fixtures)} befejezett m√©rk≈ëz√©s, {len(pending_fixtures)} folyamatban.")

    def delete_selected_simulation(self):
        selected_item = self.simulation_treeview.selection()
        if not selected_item:
            messagebox.showwarning("Figyelmeztet√©s", "Nem v√°lasztott√°l ki t√∂rlend≈ë szimul√°ci√≥t.")
            return

        sim_id = int(self.simulation_treeview.item(selected_item[0], "values")[0])
        # Adatb√°zisb√≥l t√∂rl≈ë f√ºggv√©nyt itt h√≠vd meg!

        self.load_simulations()
        self.fixture_treeview.delete(*self.fixture_treeview.get_children())
        messagebox.showinfo("Siker", f"Szimul√°ci√≥ ID: {sim_id} t√∂r√∂lve.")

        if self.refresh_callback:
            self.refresh_callback()



